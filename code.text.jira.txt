let
    // URL to get JQL
    jqlURL = "https://jiracloudweg.atlassian.net/rest/api/3/filter/",

    // Function that retrieves the list of issues from a given search URL
    GetProjects = (url, index) =>
        let
            // Calculate the 'startAt' parameter for pagination based on the index and results per page.
            Skip = "&startAt=" & Text.From(index * ResultsPerPage),

            // Specify the number of results per page for pagination.
            Top = "&maxResults=" & Text.From(ResultsPerPage),

            // Retrieve the raw data from the web service at the specified URL.
            RawData = Web.Contents(url & Skip & Top),

            // Parse the raw data into a JSON document.
            Json = Json.Document(RawData),

            // Extract the list of issues from the JSON response
            Value = Json[#"issues"]
        in
            Value,

    // Function to get the maximum number of results per page from the JSON response.
    GetJiraIDCount = (url) =>
        let 
            // Retrieve the raw data from the web service at the specified URL.
            RawData = Web.Contents(url),

            // Parse the raw data into a JSON document.
            Json = Json.Document(RawData),

            // Extract the 'maxResults' value from the JSON response.
            ResultsPerPage = Json[#"total"]
        in  
            ResultsPerPage,

    // Function to get the maximum number of results per page from the JSON response.
    GetResultsPerPage = (url) =>
        let 
            // Retrieve the raw data from the web service at the specified URL.
            RawData = Web.Contents(url),

            // Parse the raw data into a JSON document.
            Json = Json.Document(RawData),

            // Extract the 'maxResults' value from the JSON response.
            ResultsPerPage = Json[#"maxResults"]
        in  
            ResultsPerPage,

    // Function that retrieves the search URL from a filter ID
    GetSearchUrl = (filterID) =>
        let
            // Ensure the filterID is converted to text
            FilterIDText = Text.From(filterID),

            // Retrieve the raw data from the web service at the specified URL.
            RawData = Web.Contents(jqlURL & FilterIDText),
            
            // Parse the raw data into a JSON document.
            Json = Json.Document(RawData),

            // Extract the searchUrl field from the JSON response
            searchUrl = Json[#"searchUrl"]
        in
            searchUrl,

    // Function that returns filter IDs and titles
    GetFilterData = () =>
        let
            // Extract the list of filter IDs and titles from the "Filtro_ID" table
            FiltroTabela = Table.TransformColumns(#"JIRA - Filtro Indicadores", {"Indicador", each Text.From(_)}),
            FiltroComTitulo = Table.SelectColumns(FiltroTabela, {"Indicador", "FiltroID"}),

            // Generate the URL for each filter
            FiltroUrls = Table.AddColumn(FiltroComTitulo, "URL", each GetSearchUrl([FiltroID]))
        in
            FiltroUrls,

    // Get the filter data including URLs and titles
    FiltroData = GetFilterData(),

    // Initialize ResultsPerPage by invoking the GetResultsPerPage function.
    ResultsPerPage = GetResultsPerPage(FiltroData{0}[URL]),

    // Compute the total number of JIRA IDs and determine the number of pages.
    JiraIDCount = Table.AddColumn(FiltroData, "JiraIDCount", each List.Max({ResultsPerPage, GetJiraIDCount([URL])})),
    PageCount = Table.AddColumn(JiraIDCount,"PageCount", each Number.RoundUp([JiraIDCount] / ResultsPerPage)),

    // Generate a list of page indices based on the total number of pages.
    PageIndices = Table.AddColumn(PageCount, "Indices", each ({ 0 .. [PageCount] - 1 })),
    
    // Execute GetProjects for each index in the Indices column
    AddProjectsColumn = Table.AddColumn(PageIndices, "Projects", each List.Transform([Indices], (index) => GetProjects([URL], index))),

    // Combine the pages into a single list of JIRA IDs.
    ProjectsUnion = Table.AddColumn(AddProjectsColumn, "Projetos", each List.Union([Projects])),

    // Expand projects
    ExpandProjects = Table.ExpandRecordColumn(Table.ExpandListColumn(ProjectsUnion, "Projetos"), "Projetos", {"fields"}, {"fields"}),

    // Expand Fields
    ExpandFields = Table.ExpandRecordColumn(ExpandProjects, "fields", {"summary", "project", "assignee", "status", "aggregateprogress", "labels"}, {"Projeto", "project", "assignee", "status", "aggregateprogress", "labels"}),

    // Expand project
    ExpandProject = Table.ExpandRecordColumn(Table.ExpandRecordColumn(ExpandFields, "project", {"projectCategory"}), "projectCategory", {"name"}, {"Seção"}),

    // Expand assignee
    ExpandAssignee = Table.ExpandRecordColumn(ExpandProject, "assignee", {"displayName", "emailAddress"}, {"Responsável", "E-mail"}),

    // Expand status
    ExpandStatus = Table.TransformColumns(Table.ExpandRecordColumn(ExpandAssignee, "status", {"name"}, {"Status"}), {"Status", each Text.Proper(_)}),

    // Expand aggregate
    ExpandAggregate = Table.ExpandRecordColumn(ExpandStatus, "aggregateprogress", {"total","progress","percent"}, {"Alocado","Realizado","Percentual"}),

    //Select Label Continent
    ColumnLabelContinente = Table.AddColumn(ExpandAggregate, "Continente", each 
        if (Value.Type([labels]) = List.Type) then
            let
                labelsList = [labels],
                // Select only the item that contains "_ctry"
                countryLabels = List.Select(labelsList, each Text.Contains(_, "_count")),

                result = if List.Count(countryLabels) > 0 then 
                    Text.Replace(List.First(countryLabels), "_count","")
                else 
                    "Global"
            in
                result
        else
            ""
    ),

    //Select Label Pais
    ColumnLabelPais = Table.AddColumn(ColumnLabelContinente, "País", each 
        if (Value.Type([labels]) = List.Type) then
            let
                labelsList = [labels],
                // Select only the item that contains "_ctry"
                countryLabels = List.Select(labelsList, each Text.Contains(_, "_ctry")),

                result = if List.Count(countryLabels) > 0 then 
                    Text.Replace(List.First(countryLabels), "_ctry","")
                else 
                    "Global"
            in
                result
        else
            ""
    ),

    //Select columns
    ColunasSelecionadas = Table.SelectColumns(ColumnLabelPais, {"Indicador", "Projeto", "Seção", "Responsável", "E-mail", "Status", "Alocado", "Realizado", "Percentual", "Continente", "País"}),

    // Join Equipe with e-mail
    JoinEquipe = Table.NestedJoin(ColunasSelecionadas, {"E-mail"}, #"DIN - Equipes", {"E-mail"}, "Equipe", JoinKind.LeftOuter),

    // Expand Equipe
    ExpandEquipe = Table.ExpandTableColumn(JoinEquipe, "Equipe", {"Equipe"}),

    //Add row Australia to map
    LinhaAustralia = Table.FromRecords({[Indicador = "TIN-Portifólio-2024 Status", Projeto = "LinhaAustraliaParaMapa",Continente = "Global",País = "Australia"]}),

    //Combina tabelas
    CombinedResults = Table.Combine({ExpandEquipe,LinhaAustralia}),

    //Remover colunas não utilizadas
    RemoveColunas = Table.RemoveColumns(CombinedResults,{"Alocado", "Realizado", "Responsável", "Percentual", "Seção"}),

    //Filtra colaboradores inexistentes na base
    FiltroInexistentes = Table.SelectRows(RemoveColunas, each ([#"E-mail"] <> null and [#"E-mail"] <> "brunnod@weg.net" and [#"E-mail"] <> "ricardoac@weg.net"))
in
    FiltroInexistentes