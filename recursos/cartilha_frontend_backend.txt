# Cartilha de Integração Frontend - Backend: automacaopmobackend

Data: 08 de Maio de 2025

## Visão Geral

Este documento serve como um guia para o desenvolvimento do frontend, detalhando os endpoints disponíveis no backend refatorado do sistema de Gestão de Projetos e Melhorias. Todos os endpoints estão sob o prefixo base: `/backend/v1/`.

As respostas de sucesso geralmente retornam o objeto criado/atualizado/recuperado ou uma lista deles. Erros comuns incluem:

*   `400 Bad Request`: Dados de entrada inválidos, violação de regras de negócio (ex: nome duplicado).
*   `404 Not Found`: Recurso solicitado não encontrado.
*   `422 Unprocessable Entity`: Erro de validação do FastAPI para os DTOs de entrada.
*   `500 Internal Server Error`: Erro inesperado no servidor.

Os DTOs (Data Transfer Objects) mencionados abaixo podem ser encontrados nos seguintes caminhos no código do backend:

*   DTOs de entrada/saída para a API: `app/application/dtos/` (ex: `secao_dtos.py`, `projeto_dtos.py`)

## 1. Seções (`/backend/v1/secoes`)

Gerencia as seções da empresa.

*   **`POST /` - Criar Seção**
    *   **Funcionalidade:** Cria uma nova seção.
    *   **Corpo da Requisição (JSON):** `SecaoCreateDTO`
        ```json
        {
          "nome": "string", // Obrigatório, Único
          "descricao": "string" // Opcional
        }
        ```
    *   **Resposta (201 Created):** `SecaoDTO` com a seção criada.
    *   **Observações:** O nome da seção deve ser único.

*   **`GET /{secao_id}` - Obter Seção por ID**
    *   **Funcionalidade:** Retorna uma seção específica pelo seu ID.
    *   **Resposta (200 OK):** `SecaoDTO`.

*   **`GET /` - Listar Todas as Seções**
    *   **Funcionalidade:** Retorna uma lista de todas as seções. Aceita paginação e filtro por status ativo.
    *   **Query Params:**
        *   `skip` (int, opcional, default 0): Número de registros a pular.
        *   `limit` (int, opcional, default 100): Número máximo de registros a retornar.
        *   `apenas_ativos` (bool, opcional, default False): Se `true`, retorna apenas seções ativas.
    *   **Resposta (200 OK):** Lista de `SecaoDTO`.

*   **`PUT /{secao_id}` - Atualizar Seção**
    *   **Funcionalidade:** Atualiza uma seção existente.
    *   **Corpo da Requisição (JSON):** `SecaoUpdateDTO`
        ```json
        {
          "nome": "string", // Opcional, se fornecido deve ser único (exceto para o ID atual)
          "descricao": "string", // Opcional
          "ativo": boolean // Opcional
        }
        ```
    *   **Resposta (200 OK):** `SecaoDTO` com a seção atualizada.

*   **`DELETE /{secao_id}` - Excluir Seção**
    *   **Funcionalidade:** Exclui uma seção. (Logicamente, se a implementação for de soft delete, ou fisicamente).
    *   **Resposta (200 OK):** `SecaoDTO` com a seção excluída.
    *   **Observações:** Não será possível excluir uma seção se ela possuir equipes ativas vinculadas.

## 2. Equipes (`/backend/v1/equipes`)

Gerencia as equipes, vinculadas a seções.

*   **`POST /` - Criar Equipe**
    *   **Funcionalidade:** Cria uma nova equipe.
    *   **Corpo da Requisição (JSON):** `EquipeCreateDTO`
        ```json
        {
          "secao_id": integer, // Obrigatório, ID de uma Seção existente e ativa
          "nome": "string", // Obrigatório, Único dentro da mesma seção
          "descricao": "string" // Opcional
        }
        ```
    *   **Resposta (201 Created):** `EquipeDTO`.
    *   **Observações:** O nome da equipe deve ser único dentro da seção especificada.

*   **`GET /{equipe_id}` - Obter Equipe por ID**
    *   **Funcionalidade:** Retorna uma equipe específica.
    *   **Resposta (200 OK):** `EquipeDTO`.

*   **`GET /` - Listar Todas as Equipes**
    *   **Funcionalidade:** Retorna uma lista de equipes. Aceita paginação, filtro por status ativo e filtro por `secao_id`.
    *   **Query Params:**
        *   `skip` (int, opcional, default 0)
        *   `limit` (int, opcional, default 100)
        *   `apenas_ativos` (bool, opcional, default False)
        *   `secao_id` (int, opcional): Filtra equipes por ID da seção.
    *   **Resposta (200 OK):** Lista de `EquipeDTO`.

*   **`PUT /{equipe_id}` - Atualizar Equipe**
    *   **Funcionalidade:** Atualiza uma equipe existente.
    *   **Corpo da Requisição (JSON):** `EquipeUpdateDTO`
        ```json
        {
          "secao_id": integer, // Opcional, se fornecido, deve ser ID de Seção existente e ativa
          "nome": "string", // Opcional, se fornecido, deve ser único dentro da seção (exceto para o ID atual)
          "descricao": "string", // Opcional
          "ativo": boolean // Opcional
        }
        ```
    *   **Resposta (200 OK):** `EquipeDTO`.

*   **`DELETE /{equipe_id}` - Excluir Equipe**
    *   **Funcionalidade:** Exclui uma equipe.
    *   **Resposta (200 OK):** `EquipeDTO`.
    *   **Observações:** Considerar regras de negócio (ex: não excluir se houver recursos ativos vinculados).

## 3. Recursos (`/backend/v1/recursos`)

Gerencia os recursos (funcionários).

*   **`POST /` - Criar Recurso**
    *   **Funcionalidade:** Cria um novo recurso.
    *   **Corpo da Requisição (JSON):** `RecursoCreateDTO`
        ```json
        {
          "equipe_principal_id": integer, // Opcional, ID de uma Equipe existente e ativa
          "nome": "string", // Obrigatório
          "email": "string", // Obrigatório, Único
          "matricula": "string", // Opcional, Único se fornecido
          "cargo": "string", // Opcional
          "jira_user_id": "string", // Opcional, Único se fornecido
          "data_admissao": "YYYY-MM-DD" // Opcional
        }
        ```
    *   **Resposta (201 Created):** `RecursoDTO`.

*   **`GET /{recurso_id}` - Obter Recurso por ID**
    *   **Funcionalidade:** Retorna um recurso específico.
    *   **Resposta (200 OK):** `RecursoDTO`.

*   **`GET /` - Listar Todos os Recursos**
    *   **Funcionalidade:** Retorna uma lista de recursos. Aceita paginação, filtro por status ativo e filtro por `equipe_id`.
    *   **Query Params:**
        *   `skip` (int, opcional, default 0)
        *   `limit` (int, opcional, default 100)
        *   `apenas_ativos` (bool, opcional, default False)
        *   `equipe_id` (int, opcional): Filtra recursos por ID da equipe principal.
    *   **Resposta (200 OK):** Lista de `RecursoDTO`.

*   **`PUT /{recurso_id}` - Atualizar Recurso**
    *   **Funcionalidade:** Atualiza um recurso existente.
    *   **Corpo da Requisição (JSON):** `RecursoUpdateDTO` (campos opcionais, similar ao CreateDTO, mais `ativo`)
        ```json
        {
          "equipe_principal_id": integer, 
          "nome": "string", 
          "email": "string", // Único se fornecido e diferente do atual
          "matricula": "string", // Único se fornecido e diferente do atual
          "cargo": "string", 
          "jira_user_id": "string", // Único se fornecido e diferente do atual
          "data_admissao": "YYYY-MM-DD",
          "ativo": boolean
        }
        ```
    *   **Resposta (200 OK):** `RecursoDTO`.

*   **`DELETE /{recurso_id}` - Excluir Recurso**
    *   **Funcionalidade:** Exclui um recurso.
    *   **Resposta (200 OK):** `RecursoDTO`.
    *   **Observações:** Considerar regras de negócio (ex: não excluir se houver apontamentos ou alocações ativas).

## 4. Status de Projetos (`/backend/v1/status-projetos`)

Gerencia os possíveis status de um projeto.

*   **`POST /` - Criar Status de Projeto**
    *   **Funcionalidade:** Cria um novo status de projeto.
    *   **Corpo da Requisição (JSON):** `StatusProjetoCreateDTO`
        ```json
        {
          "nome": "string", // Obrigatório, Único
          "descricao": "string", // Opcional
          "is_final": boolean, // Opcional, default False
          "ordem_exibicao": integer // Opcional, Único se fornecido
        }
        ```
    *   **Resposta (201 Created):** `StatusProjetoDTO`.

*   **`GET /{status_id}` - Obter Status de Projeto por ID**
    *   **Funcionalidade:** Retorna um status de projeto específico.
    *   **Resposta (200 OK):** `StatusProjetoDTO`.

*   **`GET /` - Listar Todos os Status de Projetos**
    *   **Funcionalidade:** Retorna uma lista de status de projetos. Aceita paginação.
    *   **Query Params:**
        *   `skip` (int, opcional, default 0)
        *   `limit` (int, opcional, default 100)
    *   **Resposta (200 OK):** Lista de `StatusProjetoDTO` (geralmente ordenados por `ordem_exibicao` ou nome).

*   **`PUT /{status_id}` - Atualizar Status de Projeto**
    *   **Funcionalidade:** Atualiza um status de projeto existente.
    *   **Corpo da Requisição (JSON):** `StatusProjetoUpdateDTO` (campos opcionais, similar ao CreateDTO)
        ```json
        {
          "nome": "string", // Único se fornecido e diferente do atual
          "descricao": "string",
          "is_final": boolean,
          "ordem_exibicao": integer // Único se fornecido e diferente do atual
        }
        ```
    *   **Resposta (200 OK):** `StatusProjetoDTO`.

*   **`DELETE /{status_id}` - Excluir Status de Projeto**
    *   **Funcionalidade:** Exclui um status de projeto.
    *   **Resposta (200 OK):** `StatusProjetoDTO`.
    *   **Observações:** Não será possível excluir um status se ele estiver sendo usado por algum projeto.

## 5. Projetos (`/backend/v1/projetos`)

Gerencia os projetos e melhorias.

*   **`POST /` - Criar Projeto**
    *   **Funcionalidade:** Cria um novo projeto.
    *   **Corpo da Requisição (JSON):** `ProjetoCreateDTO`
        ```json
        {
          "nome": "string", // Obrigatório, Único
          "codigo_empresa": "string", // Opcional, Único se fornecido
          "descricao": "string", // Opcional
          "jira_project_key": "string", // Opcional, Único se fornecido
          "status_projeto_id": integer, // Obrigatório, ID de um StatusProjeto existente
          "data_inicio_prevista": "YYYY-MM-DD", // Opcional
          "data_fim_prevista": "YYYY-MM-DD" // Opcional
        }
        ```
    *   **Resposta (201 Created):** `ProjetoDTO`.

*   **`GET /{projeto_id}` - Obter Projeto por ID**
    *   **Funcionalidade:** Retorna um projeto específico.
    *   **Resposta (200 OK):** `ProjetoDTO`.

*   **`GET /` - Listar Todos os Projetos**
    *   **Funcionalidade:** Retorna uma lista de projetos. Aceita paginação, filtro por status ativo e filtro por `status_projeto_id`.
    *   **Query Params:**
        *   `skip` (int, opcional, default 0)
        *   `limit` (int, opcional, default 100)
        *   `apenas_ativos` (bool, opcional, default False)
        *   `status_projeto_id` (int, opcional): Filtra projetos por ID do status.
    *   **Resposta (200 OK):** Lista de `ProjetoDTO`.

*   **`PUT /{projeto_id}` - Atualizar Projeto**
    *   **Funcionalidade:** Atualiza um projeto existente.
    *   **Corpo da Requisição (JSON):** `ProjetoUpdateDTO` (campos opcionais, similar ao CreateDTO, mais `ativo`)
        ```json
        {
          "nome": "string", // Único se fornecido e diferente do atual
          "codigo_empresa": "string", // Único se fornecido e diferente do atual
          "descricao": "string",
          "jira_project_key": "string", // Único se fornecido e diferente do atual
          "status_projeto_id": integer, // ID de um StatusProjeto existente
          "data_inicio_prevista": "YYYY-MM-DD",
          "data_fim_prevista": "YYYY-MM-DD",
          "ativo": boolean
        }
        ```
    *   **Resposta (200 OK):** `ProjetoDTO`.

*   **`DELETE /{projeto_id}` - Excluir Projeto**
    *   **Funcionalidade:** Exclui um projeto.
    *   **Resposta (200 OK):** `ProjetoDTO`.
    *   **Observações:** Considerar regras de negócio (ex: não excluir se houver apontamentos ou alocações ativas).

## 6. Itens (Exemplo) (`/backend/v1/items`)

Endpoint de exemplo, mantido e refatorado.

*   **`POST /` - Criar Item**
    *   **Corpo (JSON):** `ItemCreateDTO` (`{"description": "string"}`)
    *   **Resposta (201):** `ItemDTO`
*   **`GET /{item_id}` - Obter Item por ID**
    *   **Resposta (200):** `ItemDTO`
*   **`GET /` - Listar Todos os Itens**
    *   **Resposta (200):** Lista de `ItemDTO`
*   **`PUT /{item_id}` - Atualizar Item**
    *   **Corpo (JSON):** `ItemUpdateDTO` (`{"description": "string"}`)
    *   **Resposta (200):** `ItemDTO`
*   **`DELETE /{item_id}` - Excluir Item**
    *   **Resposta (200):** `ItemDTO`

## Observações Gerais para o Frontend

*   **Autenticação/Autorização:** Esta cartilha não detalha a autenticação. Conforme discutido, a autenticação será tratada pelo frontend e/ou um gateway de API. O backend espera que as requisições cheguem já autenticadas e autorizadas (se necessário, um token JWT pode ser passado no header `Authorization: Bearer <token>`). Para os endpoints listados, o perfil de usuário esperado é o de `admin`.
*   **Tratamento de Datas:** Datas são geralmente enviadas e recebidas no formato `YYYY-MM-DD`. Data e hora (DATETIME) seguem o padrão ISO 8601.
*   **Paginação:** Para listagens, o frontend deve implementar controles de paginação (`skip`, `limit`) e informar ao usuário o total de registros/páginas, se o backend fornecer essa informação (atualmente, o backend retorna apenas a lista limitada).
*   **Feedback ao Usuário:** É crucial que o frontend forneça feedback claro ao usuário sobre o resultado das operações (sucesso, erro, mensagens de validação retornadas pelo backend).
*   **Dropdowns/Seletores:** Para campos como `secao_id` em Equipes, `equipe_principal_id` em Recursos, `status_projeto_id` em Projetos, o frontend precisará primeiro carregar as opções disponíveis através dos respectivos endpoints de listagem (ex: `GET /backend/v1/secoes` para popular um dropdown de seções).
*   **Consistência com `esq_frontend.txt`:** Esta cartilha foca nos endpoints do backend. O design visual e a experiência do usuário devem seguir o `esq_frontend.txt`. Por exemplo, as telas de CRUD padrão descritas no `esq_frontend.txt` consumirão os endpoints de CRUD listados aqui para cada entidade.

Esta cartilha deve ser usada como referência inicial. Conforme o desenvolvimento do frontend avança e novas entidades/funcionalidades são adicionadas ao backend, este documento pode precisar ser atualizado.

